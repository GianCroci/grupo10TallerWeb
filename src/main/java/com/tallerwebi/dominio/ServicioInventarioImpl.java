package com.tallerwebi.dominio;import com.tallerwebi.dominio.entidad.*;import com.tallerwebi.dominio.excepcion.InventarioVacioException;import com.tallerwebi.dominio.interfaz.repositorio.RepositorioInventario;import com.tallerwebi.dominio.interfaz.servicio.ServicioInventario;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;@Service@Transactionalpublic class ServicioInventarioImpl implements ServicioInventario {    private RepositorioInventario repositorioInventario;    @Autowired    public ServicioInventarioImpl(RepositorioInventario repositorioInventario) {        this.repositorioInventario = repositorioInventario;    }    @Override    public List<Equipamiento> obtenerInventario(Long idPersonaje) throws InventarioVacioException {        List<Equipamiento> inventario = repositorioInventario.obtenerInventario(idPersonaje);        if (inventario == null || inventario.isEmpty()) {            throw new InventarioVacioException("El inventario está vacío!");        }        return inventario;    }    @Override    public Equipamiento obtenerPrimerEquipado(Long idPersonaje) throws InventarioVacioException {        return obtenerInventario(idPersonaje).stream()                .filter(Equipamiento::getEquipado)                .findFirst()                .orElse(null);    }    @Override    public Equipamiento obtenerEquipamientoPorId(Long idPersonaje, Long idEquipamiento) {        return repositorioInventario.obtenerEquipoDePersonajePorId(idPersonaje, idEquipamiento);    }    @Override    public Boolean equipar(Long idPersonaje, Long idEquipamiento) throws InventarioVacioException {        Equipamiento equipoAEquipar = obtenerEquipamientoPorId(idPersonaje, idEquipamiento);        if (equipoAEquipar == null) {            return Boolean.FALSE;        }        Personaje personaje = equipoAEquipar.getPersonaje();        if (equipoAEquipar.getEquipado()) {            equipoAEquipar.setEquipado(false);            restarEstadisticas(personaje, equipoAEquipar.getStats());            recalcularEstadisticasPersonaje(personaje, idPersonaje);            return Boolean.TRUE;        }        Equipamiento equipoDelMismoTipoYaEquipado = obtenerEquipamientoEquipadoPorTipo(idPersonaje, equipoAEquipar.getClass());        if (equipoDelMismoTipoYaEquipado != null) {            equipoDelMismoTipoYaEquipado.setEquipado(false);            restarEstadisticas(personaje, equipoDelMismoTipoYaEquipado.getStats());        }        equipoAEquipar.setEquipado(true);        sumarEstadisticas(personaje, equipoAEquipar.getStats());        recalcularEstadisticasPersonaje(personaje, idPersonaje);        return Boolean.TRUE;    }    @Override    public void sumarEstadisticas(Personaje personaje, Estadisticas stats) {        personaje.getEstadisticas().setFuerza(personaje.getEstadisticas().getFuerza() + stats.getFuerza());        personaje.getEstadisticas().setInteligencia(personaje.getEstadisticas().getInteligencia() + stats.getInteligencia());        personaje.getEstadisticas().setAgilidad(personaje.getEstadisticas().getAgilidad() + stats.getAgilidad());        personaje.getEstadisticas().setArmadura(personaje.getEstadisticas().getArmadura() + stats.getArmadura());    }    @Override    public void restarEstadisticas(Personaje personaje, Estadisticas stats) {        personaje.getEstadisticas().setFuerza(personaje.getEstadisticas().getFuerza() - stats.getFuerza());        personaje.getEstadisticas().setInteligencia(personaje.getEstadisticas().getInteligencia() - stats.getInteligencia());        personaje.getEstadisticas().setAgilidad(personaje.getEstadisticas().getAgilidad() - stats.getAgilidad());        personaje.getEstadisticas().setArmadura(personaje.getEstadisticas().getArmadura() - stats.getArmadura());    }    @Override    public Equipamiento obtenerEquipamientoEquipadoPorTipo(Long idPersonaje, Class<? extends Equipamiento> tipoEquipamiento) {        try {            return obtenerInventario(idPersonaje).stream()                    .filter(equipo -> equipo.getEquipado() && tipoEquipamiento.isInstance(equipo))                    .findFirst()                    .orElse(null);        } catch (InventarioVacioException e) {            return null;        }    }    private void recalcularEstadisticasPersonaje(Personaje personaje, Long idPersonaje) {        personaje.getRol().aplicarStatsBase(personaje);        List<Equipamiento> inventario = repositorioInventario.obtenerInventario(idPersonaje);        for (Equipamiento equipo : inventario) {            if (equipo.getEquipado()) {                sumarEstadisticas(personaje, equipo.getStats());            }        }    }    /*    public void darArmaEspecial(){        Equipamiento armaEspecial = new Arma();        armaEspecial.setId(4l);        armaEspecial.setNombre("Arma Especial");        armaEspecial.getStats().setFuerza(10);        armaEspecial.getStats().setInteligencia(10);        armaEspecial.getStats().setArmadura(10);        armaEspecial.getStats().setAgilidad(10);        armaEspecial.setCostoMejora(100);        armaEspecial.setEquipado(false);        equipar(4);        repositorioInventario.modificarEquipamiento(armaEspecial);    }*/}