package com.tallerwebi.dominio;import com.tallerwebi.dominio.entidad.*;import com.tallerwebi.dominio.excepcion.InventarioVacioException;import com.tallerwebi.dominio.interfaz.repositorio.RepositorioInventario;import com.tallerwebi.dominio.interfaz.servicio.ServicioInventario;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;@Service@Transactionalpublic class ServicioInventarioImpl implements ServicioInventario {    private RepositorioInventario repositorioInventario;    @Autowired    public ServicioInventarioImpl(RepositorioInventario repositorioInventario) {        this.repositorioInventario = repositorioInventario;    }    @Override    public List<Equipamiento> obtenerInventario(Long idPersonaje) throws InventarioVacioException {        List<Equipamiento> inventario = repositorioInventario.obtenerInventario(idPersonaje);        if (inventario == null || inventario.isEmpty()) {            throw new InventarioVacioException("El inventario está vacío!");        }        return inventario;    }    @Override    public Equipamiento obtenerPrimerEquipado(Long idPersonaje) throws InventarioVacioException {        return obtenerInventario(idPersonaje).stream()                .filter(Equipamiento::getEquipado)                .findFirst()                .orElse(null);    }    @Override    public Equipamiento obtenerEquipamientoPorId(Long idPersonaje, Long idEquipamiento) {        return repositorioInventario.obtenerEquipoDePersonajePorId(idPersonaje, idEquipamiento);    }    @Override    public Boolean equipar(Long idPersonaje, Long idEquipamiento) throws InventarioVacioException {        Equipamiento equipo = obtenerEquipamientoPorId(idPersonaje, idEquipamiento);        if (equipo != null) {            Personaje personaje = equipo.getPersonaje();            if (equipo.getEquipado()) {                equipo.setEquipado(false);                personaje.getRol().aplicarStatsBase(personaje);                return Boolean.TRUE;            }            Equipamiento equipoActual = obtenerPrimerEquipado(idPersonaje);            if (equipoActual != null) {                equipoActual.setEquipado(false);                personaje.getRol().aplicarStatsBase(personaje);            }            equipo.setEquipado(true);            sumarEstadisticas(personaje, equipo.getStats());            return Boolean.TRUE;        }        return Boolean.FALSE;    }    @Override    public void sumarEstadisticas(Personaje personaje, Estadisticas stats) {        personaje.getEstadisticas().setFuerza(personaje.getEstadisticas().getFuerza() + stats.getFuerza());        personaje.getEstadisticas().setInteligencia(personaje.getEstadisticas().getInteligencia() + stats.getInteligencia());        personaje.getEstadisticas().setAgilidad(personaje.getEstadisticas().getAgilidad() + stats.getAgilidad());        personaje.getEstadisticas().setArmadura(personaje.getEstadisticas().getArmadura() + stats.getArmadura());    }    /*    public void darArmaEspecial(){        Equipamiento armaEspecial = new Arma();        armaEspecial.setId(4l);        armaEspecial.setNombre("Arma Especial");        armaEspecial.getStats().setFuerza(10);        armaEspecial.getStats().setInteligencia(10);        armaEspecial.getStats().setArmadura(10);        armaEspecial.getStats().setAgilidad(10);        armaEspecial.setCostoMejora(100);        armaEspecial.setEquipado(false);        equipar(4);        repositorioInventario.modificarEquipamiento(armaEspecial);    }*/}