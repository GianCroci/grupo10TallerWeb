package com.tallerwebi.dominio;import com.tallerwebi.dominio.entidad.*;import com.tallerwebi.dominio.excepcion.InventarioVacioException;import com.tallerwebi.dominio.interfaz.repositorio.RepositorioInventario;import com.tallerwebi.dominio.interfaz.servicio.ServicioInventario;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;import java.util.stream.Collectors;@Service("servicioInventario")@Transactionalpublic class ServicioInventarioImpl implements ServicioInventario {    private RepositorioInventario repositorioInventario;    @Autowired    public ServicioInventarioImpl(RepositorioInventario repositorioInventario) {        this.repositorioInventario = repositorioInventario;    }    @Override    public List<Equipamiento> obtenerInventario(Long idPersonaje) throws InventarioVacioException {        List<Equipamiento> inventario = repositorioInventario.obtenerInventario(idPersonaje);        if (inventario == null || inventario.isEmpty()) {            throw new InventarioVacioException("El inventario está vacío!");        }        return inventario;    }    @Override    public Equipamiento obtenerEquipamientoPorId(Long idPersonaje, Long idEquipamiento) {        return repositorioInventario.obtenerEquipoDePersonajePorId(idPersonaje, idEquipamiento);    }    @Override    public Boolean equipar(Long idPersonaje, Long idEquipamiento) throws InventarioVacioException {        Equipamiento equipoAEquipar = obtenerEquipamientoPorId(idPersonaje, idEquipamiento);        if (equipoAEquipar == null) return false;        Personaje personaje = equipoAEquipar.getPersonaje();        if (equipoAEquipar.getEquipado()) {            equipoAEquipar.setEquipado(false);        } else {            Equipamiento yaEquipado = obtenerEquipamientoEquipadoPorTipo(idPersonaje, equipoAEquipar.getClass());            if (yaEquipado != null) yaEquipado.setEquipado(false);            equipoAEquipar.setEquipado(true);        }        recalcularEstadisticasPersonaje(personaje, idPersonaje);        return true;    }    @Override    public Equipamiento obtenerEquipamientoEquipadoPorTipo(Long idPersonaje, Class<? extends Equipamiento> tipoEquipamiento) {        try {            return obtenerInventario(idPersonaje).stream()                    .filter(equipo -> equipo.getEquipado() && tipoEquipamiento.isInstance(equipo))                    .findFirst()                    .orElse(null);        } catch (InventarioVacioException e) {            return null;        }    }    @Override    public void recalcularEstadisticasPersonaje(Personaje personaje, Long idPersonaje) {        Estadisticas nuevasStats = new Estadisticas();        personaje.setEstadisticas(nuevasStats);        personaje.getRol().aplicarStatsBase(personaje);        List<Equipamiento> inventario = repositorioInventario.obtenerInventario(idPersonaje);        for (Equipamiento equipo : inventario) {            if (Boolean.TRUE.equals(equipo.getEquipado())) {                Estadisticas s = equipo.getStats();                nuevasStats.setFuerza(nuevasStats.getFuerza() + s.getFuerza());                nuevasStats.setInteligencia(nuevasStats.getInteligencia() + s.getInteligencia());                nuevasStats.setAgilidad(nuevasStats.getAgilidad() + s.getAgilidad());                nuevasStats.setArmadura(nuevasStats.getArmadura() + s.getArmadura());            }        }    }    @Override    public List<Equipamiento> obtenerInventarioFiltradoPorTipo(Long idPersonaje, String tipo) throws InventarioVacioException {        List<Equipamiento> inventario = obtenerInventario(idPersonaje);        if (tipo == null || tipo.equalsIgnoreCase("Todos")) {            return inventario;        }        return inventario.stream()                .filter(e -> e.getClass().getSimpleName().equalsIgnoreCase(tipo))                .collect(Collectors.toList());    }    @Override    public Equipamiento obtenerEquipoSeleccionado(List<Equipamiento> inventarioFiltrado, Long idPersonaje) {        Equipamiento equipoSeleccionado = inventarioFiltrado.stream()                .filter(Equipamiento::getEquipado)                .findFirst()                .orElse(null);        if (equipoSeleccionado == null && !inventarioFiltrado.isEmpty()) {            equipoSeleccionado = inventarioFiltrado.get(0);        }        return equipoSeleccionado;    }    @Override    public Equipamiento validarEquipoSeleccionadoEnFiltro(List<Equipamiento> inventarioFiltrado, Equipamiento seleccionado, List<Equipamiento> inventarioCompleto) {        if (seleccionado == null) return null;        boolean estaEnFiltrado = inventarioFiltrado.stream()                .anyMatch(e -> e.getId().equals(seleccionado.getId()));        if (!estaEnFiltrado) {            return inventarioCompleto.stream()                    .filter(Equipamiento::getEquipado)                    .findFirst()                    .orElse(inventarioCompleto.isEmpty() ? null : inventarioCompleto.get(0));        }        return seleccionado;    }}